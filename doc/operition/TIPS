
##########
GIT IDEA 操作：
http://blog.csdn.net/lovesummerforever/article/details/50032937

GIT
创建新切换到新分支: 提交修改前切换到新的分支上：
git brach newImage
git checkout newImage; git commit
也可以使用这条命令：
git checkout -b Brach-Name

创建远程分支，并在GITHUB网页中显示 ：
C:\Users\ShellMount\IdeaProjects\vlcj-player [master +4 ~0 -0 !]> git checkout -b dev
Switched to a new branch 'dev'
C:\Users\ShellMount\IdeaProjects\vlcj-player [dev +4 ~0 -0 !]> git push origin dev
Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/ShellMount/vlcj-player.git
 * [new branch]      dev -> dev
C:\Users\ShellMount\IdeaProjects\vlcj-player [dev +4 ~0 -0 !]>

##########
消息队列
ZEROMQ



#
Git常用命令

查看、添加、提交、删除、找回，重置修改文件
git help <command> # 显示command的help
git show # 显示某次提交的内容 git show $id
git co -- <file> # 抛弃工作区修改
git co . # 抛弃工作区修改
git add <file> # 将工作文件修改提交到本地暂存区
git add . # 将所有修改过的工作文件提交暂存区
git rm <file> # 从版本库中删除文件
git rm <file> --cached # 从版本库中删除文件，但不删除文件
git reset <file> # 从暂存区恢复到工作文件
git reset -- . # 从暂存区恢复到工作文件
git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改
git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am "some comments"
git ci --amend # 修改最后一次提交记录
git revert <$id> # 恢复某次提交的状态，恢复动作本身也创建次提交对象
git revert HEAD # 恢复最后一次提交的状态
查看文件diff
git diff <file> # 比较当前文件和暂存区文件差异 git diff
git diff <
id1><
id1><
id2> # 比较两次提交之间的差异
git diff <branch1>..<branch2> # 在两个分支之间比较
git diff --staged # 比较暂存区和版本库差异
git diff --cached # 比较暂存区和版本库差异
git diff --stat # 仅仅比较统计信息
查看提交记录
git log git log <file> # 查看该文件每次提交记录
git log -p <file> # 查看每次详细修改内容的diff
git log -p -2 # 查看最近两次详细修改内容的diff
git log --stat #查看提交统计信息
tig
Mac上可以使用tig代替diff和log，brew install tig
Git 本地分支管理
查看、切换、创建和删除分支
git br -r # 查看远程分支
git br <new_branch> # 创建新的分支
git br -v # 查看各个分支最后提交信息
git br --merged # 查看已经被合并到当前分支的分支
git br --no-merged # 查看尚未被合并到当前分支的分支
git co <branch> # 切换到某个分支
git co -b <new_branch> # 创建新的分支，并且切换过去
git co -b <new_branch> <branch> # 基于branch创建新的new_branch
git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支
git br -d <branch> # 删除某个分支
git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
 分支合并和rebase
git merge <branch> # 将branch分支合并到当前分支
git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交
git rebase master <branch> # 将master rebase到branch，相当于： git co <branch> && git rebase master && git co master && git merge <branch>
 Git补丁管理(方便在多台机器上开发同步时用)
git diff > ../sync.patch # 生成补丁
git apply ../sync.patch # 打补丁
git apply --check ../sync.patch #测试补丁能否成功
 Git暂存管理
git stash # 暂存
git stash list # 列所有stash
git stash apply # 恢复暂存的内容
git stash drop # 删除暂存区
Git远程分支管理
git pull # 抓取远程仓库所有分支更新并合并到本地
git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git fetch origin # 抓取远程仓库更新
git merge origin/master # 将远程主分支合并到本地当前分支
git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支
git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上
git push # push所有分支
git push origin master # 将本地主分支推到远程主分支
git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
git push origin <local_branch> # 创建远程分支， origin是远程仓库名
git push origin <local_branch>:<remote_branch> # 创建远程分支
git push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支
Git远程仓库管理
GitHub
git remote -v # 查看远程服务器地址和仓库名称
git remote show origin # 查看远程服务器仓库状态
git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址
git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库
创建远程仓库
git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库
scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上
mkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库
git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址
git push -u origin master # 客户端首次提交
git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track
git remote set-head origin master # 设置远程仓库的HEAD指向master分支
也可以命令设置跟踪远程库和本地库
git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop



###GIT SSH 配置
C:\Users\ShellMount> ssh-keygen.exe

C:\Users\ShellMount\.ssh> cat .\id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCnZpe3DXH9DozYlb93CoS8nvdnFXdWvlgIgRnZoia/HP+sdCBtNPZ56JERGOXyTIyzfTFE81N9uYIMec68Nib4fMm0Yqgxel4reLdAEtsajZ8KrORBDuiGxTm+jAgBXzzw70SZ4G4243xPz4+R6RSeM0CLL9bqG4CMIFsWW3utF+2KxBCPo75m8I1qLmfh36IK5SosBXEOjdeBlkNLccbcZSD3jFx9IL43k1JYXegOlyYCCO4qDL4pZyF3A/hh/NGfoLTfAuWtQga+pVm6fcH7GI1+U8zWpMvrrnX+TCbNfhpy3sbeKPWqiCas3pZ4h0ldtOyqxNxzfJWwZgt45GKN ShellMount@DESKTOP-A7M235D

C:\Users\ShellMount\.ssh> ssh-add .\id_rsa

C:\Users\ShellMount\.ssh> ssh -T git@github.com

GIT权威文档：
https://git-scm.com/book/zh/v2



### 查看远程机器内存使用
pdsh -w qa2-dfi[1-3] free -g



###
https://10.25.0.14/cerebro/#/overview?host=DeepFlow%20Cluster




su elasticsearch -c "./elasticsearch -d"
nohup ./kibana serve &
mount -t nfs 10.23.0.191:/root/Work/Shell/Esdata /root/WorkSpace/ShellMount/EsData/
service nfs start


# executor-cores: 影响大。临近物理机最大线程数量，多进程同时执行时，要按比例缩小，防止等待
# num-executors: WORKER数量
# total-executor-cores = executor-cores * num-executors
#      与 executor-memory 有制约关系
# executor-memory，4-16G，与处理数据相关，NBAD当前8G，OK


/root/WorkSpace/Spark/spark/bin/spark-submit --class cn.net.yunshan.Nbad.Nbad \
    --master spark://master:7077  \
    --num-executors 2 \
    --executor-memory 8g \
    --executor-cores 6 \
    --driver-memory 1g \
    --total-executor-cores 12 /root/nbad.jar 1804011451


/root/WorkSpace/Spark/spark/bin/spark-submit --class cn.net.yunshan.Nbad.Nbad \
    --master spark://master:7077  \
    --executor-memory 8g \
    --executor-cores 6      /root/nbad.jar 1804011451


/root/WorkSpace/Spark/spark/bin/spark-submit --class cn.net.yunshan.Nbad.Nbad \
    --master spark://master:7077  \
    --executor-memory 8g    /root/nbad.jar 1804011451
